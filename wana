#!/bin/sh
POSIXLY_CORRECT=yes

#/*     Shell script - web-log analyser
# *     Name: 1.Projekt na IOS 
# *     Author: Matej Dubec - xdubec00
# */

#wana [FILTR] [PRIKAZ]Â [[LOG] [LOG2] ...]
#ARGCHECK 
##############################################################
ARGFOUND="0";
LOGS="0";
COMMAND="0"; 
FILTER="0";
EXPECTED="0";
EXPECTEDFOUND="0";
NOTFROMSTDIN="0";

#NAJPRV SKONTROLUJE, CI BOL AKO ARGUMENT ZADANY ".log" / ".gz" SUBOR
#NASTAVI FLAG, PODLA KTOREHO ROZHODUJEM? CI NACITAM ZO STDIN
for i in "$@"
do
    case $i in

    *gz)
    NOTFROMSTDIN="1"; #log / gz zadany ako argument -> nenacitavam zo stdin
    UNZIPPED=$(gunzip -c "$i")
    if [ "$LOGS" != "0" ];
    then
        LOGS="$LOGS
        $UNZIPPED" 
    else                  
        LOGS="$UNZIPPED"
    fi
    ;;

    *log*)
    NOTFROMSTDIN="1"; #log / gz zadany ako argument -> nenacitavam zo stdin
    if [ "$LOGS" != "0" ]; #dalsi log pridavam do premennej, za nacitany log
    then    
        LOGS="$LOGS
        $(cat "$i")"
    else                   #nasiel som argument 1.krat
        LOGS=$(cat "$i")
    fi
    ;;

    *)
    ;;
    esac
done
#NACITAM ZO STDIN AK 0 ARGUMENTOV S LOGMI
if [ "$NOTFROMSTDIN" = "0" ];
then
    while IFS= read -r line; 
    do
        if [ "$LOGS" = "0" ]; 
        then  
            LOGS=$line
        else
            LOGS="$LOGS
            $line"    
        fi
    done
fi
#CYKLUS NA VYKONAVANIE FILTROV FILTRE (aj ARGCHECK)
##############################################################
for i in "$@" 
do 
    case $i in

    #ARG=PRIKAZ
    ###############################
    #VYPISE ZDROJOVE IP (oseka)
    list-ip)
    ARGFOUND=1;
    COMMAND="list-ip";
    ;;

    #VYPISE ZDROJOVE DOMENOVE MENA (oseka)
    list-hosts)
    ARGFOUND=1;
    COMMAND="list-hosts";
    ;;

    #VYPISE CIELOVE ZDROJE (oseka)
    list-uri)
    ARGFOUND=1;
    COMMAND="list-uri";
    ;;

    #VYPISE HISTOGRAM CETNOSTI DOTAZU PODLA ZDROJ.IP
    hist-ip)
    ARGFOUND=1;
    COMMAND="hist-ip";
    ;;

    #VYPISE HISTOGRAM ZATAZE 
    hist-load)
    ARGFOUND=1;
    COMMAND="hist-load";
    ;;


    #ARG=FILTR
    ###############################
    #LAST:-A EXPECTED:DATE 
    -a)
    ARGFOUND=1;
    FILTER="-a";
    EXPECTED="DATE";
    ;;

    #LAST:-B EXPECTED:DATE
    -b)
    ARGFOUND=1;
    FILTER="-b";
    EXPECTED="DATE";
    ;;

    #LAST:-ip EXPECTED:IPADDRESS (IPv4 / IPv6)
    -ip)
    ARGFOUND=1;
    FILTER="-ip";
    EXPECTED="IPADDR";
    ;;

    #LAST:-uri EXPECTED:URI
    -uri)
    ARGFOUND=1;
    FILTER="-uri";
    EXPECTED="URI";
    ;;

    #ARG=LOG (.gz / .log)

    *.gz)
    ;;

    *.log*)
    ;;

    #ARG=EXPECTED ARGUMENT
    ###############################
    *)
    if [ "$EXPECTED" = "0" ];
    then
        echo "Unexpected argument" >&2
        exit 1;
    fi

    #KONTROLA SPRAVNEHO FORMATU ARGUMENTU PRE FILTER 
    case "$FILTER" in

    #REGEX MATCH NA (YYYY-MM-DD HH:MM:SS) -> APLIKUJ FILTER NA $LOGS 
    -a|-b)
    INPUTFORMAT=$(printf "%s\n" "$i" | awk '{if ($0 ~ /^20(0|1)[0-9]\-(0[1-9]|1[0-2])\-((0[1-9]|(1|2)[0-9])|3(0|1)) ([0-1][0-9]|2[0-3]):[0-5][0-9](:)?([0-5][0-9])?$/) printf "TRUE"; else printf "FALSE";}')

    if [ "$INPUTFORMAT" = "FALSE" ];
    then
        echo "Incorrect argument format! (Expected: YYYY-MM-DD HH:MM[:SS])" >&2
        exit 1;
    fi    

    DATEINPT=$(printf "%s\n" "$i" |
    awk '{printf "%s %s\n",$1,$2}' |
    awk '{split($1, a, "-"); split($2, b, ":"); print a[1], a[2], a[3], b[1], b[2], b[3]}' |
    awk '{
        if (NF == 5)
            printf "%s%s%s%s%s00\n", $1,$2,$3,$4,$5
        else if (NF == 6)   
            printf "%s%s%s%s%s%s\n", $1,$2,$3,$4,$5,$6
        }'
    )
    LOGS=$(printf "%s\n" "$LOGS" | 
    while read -r LINE
    do 
        DATELOG=$(printf "%s\n" "$LINE"|awk '{sub("Jan","01", $4);
            sub("Feb","02", $4);
            sub("Mar","03", $4);
            sub("Apr","04", $4);
            sub("May","05", $4);
            sub("Jun","06", $4);
            sub("Jul","07", $4);
            sub("Aug","08", $4);
            sub("Sep","09", $4);
            sub("Oct","10", $4);
            sub("Nov","11", $4);
            sub("Dec","12", $4);
            sub(/\[/,"", $4);
            split($4, b, ":");
            split(b[1], a, "/");
            printf "%s%s%s%s%s%s\n",a[3],a[2],a[1],b[2],b[3],b[4];
        }')

        if [ "$FILTER" = "-a" ];
        then
            if [ "$DATEINPT" -lt "$DATELOG" ];
            then
                printf "%s\n" "$LINE";
            fi    
        elif [ "$FILTER" = "-b" ];
        then    
            if [ "$DATELOG" -lt "$DATEINPT" ];
            then
                printf "%s\n" "$LINE";
            fi
        fi    
    done
    )
    EXPECTEDFOUND="1";
    ;;

    #REGEX MATCH NA IPv4 / IPv6 (chyba regex na kontrolu spravnosti arg.)
    #dopis regexy
    -ip)
    #printf "%s\n" "$i"
    
    INPUTFORMAT=$(printf "%s\n" "$i" | 
                    awk '{
                        if ($0 ~ /^(((2([0-4][0-9]|5[0-5])|1[0-9][0-9]|0?[1-9][0-9])\.){3}((2([0-4][0-9]|5[0-5])|1[0-9][0-9]|0?[1-9][0-9]))|(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])))$/) 
                            printf "TRUE"; 
                        else 
                            printf "FALSE";
                    }'
                )

    if [ "$INPUTFORMAT" = "FALSE" ];
    then
        echo "Incorrect argument format! (Expected: IPv4 / IPv6) " >&2
        exit 1;
    fi

    LOGS=$(printf "%s\n" "$LOGS" | 
    while read -r LINE
    do 
        printf "%s %s\n" "$i" "$LINE" | awk '{if ($1 == $2)print $0;}'    
    done
    )
    EXPECTEDFOUND="1";
    #printf "%s\n" "$LOGS"
    ;;

    #SPRAVNE ZADANA URI? FUNKCIA NA URI FILTER
    -uri)
    LOGS=$(printf "%s\n" "$LOGS"| grep "$i" | awk '{if ($6 == "\"GET" || $6 == "\"POST" || $6 == "\"HEAD") print $0;}')
    EXPECTEDFOUND="1";
    ;;
    esac

    if [ "$EXPECTEDFOUND" = "0" ];
    then
        echo "Expected argument not found!" >&2
        exit 1;
    fi

    EXPECTED=0;
    ;;
    esac


done
if [ "$ARGFOUND" = "0" ] && [ "$LOGS" = "0" ]; 
then
    echo "Wrong arguments" >&2
    exit 1;   
fi

if [ "$EXPECTED" != "0" ] && [ "$EXPECTEDFOUND" = "0" ];
then
	echo "Expected argument not found!" >&2
	exit 1;
fi

#COMMAND VYPISY   
#ak bol zadany iba log - vypisem po riadkoch na stdout
if [ "$COMMAND" = "0" ]; #&& [ "$FILTER" = "0" ]
then
    echo "$LOGS"
fi
#ak bol zadany argument na vypisanie ip adries 
if [ "$COMMAND" = "list-ip" ];
then
    printf "%s" "$LOGS" | awk '{print $1}' | sort | uniq | sed 's/\"/\r/g'
fi 

#ak bol zadany argument na vypisanie uri
if [ "$COMMAND" = "list-uri" ];
then
    #printf "%s" "$LOGS" | awk '{print $7}' | sort | uniq
    printf "%s" "$LOGS" | awk '{if ($6 == "\"GET" || $6 == "\"POST" || $6 == "\"HEAD") print $7;}' | sort | uniq
fi

#ak bol zadany argument na vypisanie hosts
if [ "$COMMAND" = "list-hosts" ];
then
    printf "%s" "$LOGS" | awk '{printf $1;printf "\n";}'|
    sort | uniq | while read -r LINE
    do
    HOST="$(host "$LINE")"  
    RETVAL="$?"
    HOST=$(printf "%s" "$HOST" | awk '{printf $5;}')
    if [ "$RETVAL" -eq "0" ];
    then
        printf "%s\n" "$HOST" | sed 's/for/\r/g'
    else
        printf "%s\n" "$LINE"   
    fi
    done
fi

if [ "$COMMAND" = "hist-ip" ];
then
    printf "%s" "$LOGS" | awk '{print $1;}' | sort | uniq -c | sed 's/\"/\r/g' | sort -nr| awk '{printf $2 " ("$1"): ";for (i = 0; i < $1; i++) printf "#";printf "\n"}'
fi

if [ "$COMMAND" = "hist-load" ];
then
    DATES=$(printf "%s" "$LOGS" | uniq | awk '{if ($1 == $2 ) print $5; else print $4;}' | sed 's/\[//g' | sort | 
        awk '{
        sub(/Jan/,"01", $1);
        sub(/Feb/,"02", $1);
        sub(/Mar/,"03", $1);
        sub(/Apr/,"04", $1);
        sub(/May/,"05", $1);
        sub(/Jun/,"06", $1);
        sub(/Jul/,"07", $1);
        sub(/Aug/,"08", $1);
        sub(/Sep/,"09", $1);
        sub(/Oct/,"10", $1);
        sub(/Nov/,"11", $1);
        sub(/Dec/,"12", $1);
        sub(/[0-9][0-9]:[0-9][0-9]$/,"00", $1);
        sub(/\//,"-", $1);
        sub(/\//,"-", $1);
        sub(/:/," ", $1);
        split($1, b, " ");
        split(b[1], a, "-");
        split(b[2], c, ":");
        year=a[3]
        month=a[2]
        day=a[1]
        hr=c[1]
        min=c[2]
        printf "%s-%s-%s %s %s\n",year,month,day,hr,min;
        }'
    )

    printf "%s\n" "$DATES" | uniq -c | awk '{ 
      printf "%s %s:%s (%s): ",$2,$3,$4,$1;
      for (i=0;i<$1;i++)
        printf "%s","#";
      printf "\n";  
    }'

    #echo "$LOGS"
    #echo "$DATES"
fi